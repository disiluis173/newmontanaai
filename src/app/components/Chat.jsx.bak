'use client'

import React, { useState, useRef, useEffect } from 'react';
import { 
  FaPaperPlane, 
  FaKey, 
  FaRobot, 
  FaUser, 
  FaArrowUp, 
  FaCog,
  FaCopy,
  FaDownload,
  FaTrash,
  FaCode,
  FaMarkdown,
  FaFilePdf,
  FaFileAlt,
  FaFileCode,
  FaBrain,
  FaSpinner,
  FaImage
} from 'react-icons/fa';
import { BiSend } from 'react-icons/bi';
import Message from './Message';
import ApiKeyModal from './ApiKeyModal';
import ChatLimitModal from './ChatLimitModal';
import { AI_PROVIDERS, getModelsForProvider, modelSupportsReasoning } from '../config/models';
import { motion, AnimatePresence } from 'framer-motion';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { saveAs } from 'file-saver';
import { marked } from 'marked';
import DOMPurify from 'dompurify';

const Chat = () => {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentProvider, setCurrentProvider] = useState('deepseek');
  const [currentModel, setCurrentModel] = useState('grok-3-mini-beta');
  const [showApiKeyModal, setShowApiKeyModal] = useState(false);
  const [error, setError] = useState(null);
  const [isThinking, setIsThinking] = useState(false);
  const [reasoningLevel, setReasoningLevel] = useState('low');
  const [apiStatus, setApiStatus] = useState({ deepseek: null, xai: null });
  const [showStatus, setShowStatus] = useState(false);
  const chatContainerRef = useRef(null);
  const inputRef = useRef(null);
  const [hasApiKeyCheck, setHasApiKeyCheck] = useState(false);
  const [maxTokens, setMaxTokens] = useState(2000);

  // Nuevo estado para las opciones de código
  const [codeOptions, setCodeOptions] = useState({
    show: false,
    content: '',
    language: 'javascript',
    position: { x: 0, y: 0 }
  });

  // Estados para la limitación de mensajes
  const [dailyMessageCount, setDailyMessageCount] = useState(0);
  const [unlimitedMode, setUnlimitedMode] = useState(false);
  const [showLimitModal, setShowLimitModal] = useState(false);
  const [blockUntil, setBlockUntil] = useState(null);
  const [blockDuration, setBlockDuration] = useState(12); // Horas iniciales de bloqueo

  // Constantes para la limitación de mensajes
  const DAILY_MESSAGE_LIMIT = 30;
  const BLOCK_INCREMENT = 12; // Incremento en horas por cada intento adicional

  // Convertir los modelos de la configuración global a formato compatible con los componentes
  const getFormattedModels = (provider) => {
    return getModelsForProvider(provider).map(model => ({
      value: model.id,
      label: model.name,
      price: model.price,
      context: model.context,
      supportsReasoning: model.supportsReasoning
    }));
  };

  // Actualizar el modelo cuando cambie el proveedor
  useEffect(() => {
    if (currentProvider) {
      const defaultModel = AI_PROVIDERS[currentProvider].defaultModel;
      setCurrentModel(defaultModel);
      // Desactivar el razonamiento por defecto al cambiar de proveedor
      setReasoningLevel('');
    }
  }, [currentProvider]);

  // Verificar si hay API key al iniciar o cambiar de proveedor, pero solo si no hay mensajes
  useEffect(() => {
    // Solo verificamos una vez al inicio o al cambiar de proveedor
    if (!hasApiKeyCheck || currentProvider) {
      const hasKey = localStorage.getItem(`${currentProvider}_api_key`);
      
      // Solo mostramos el modal si no hay API key y no hay mensajes
      if (!hasKey && messages.length === 0) {
        setShowApiKeyModal(true);
      }
      
      setHasApiKeyCheck(true);
    }
    
    // Cargar contadores de mensajes
    loadMessageCounters();
  }, [currentProvider, messages.length, hasApiKeyCheck]);
  
  // Función para cargar los contadores de mensajes
  const loadMessageCounters = () => {
    try {
      // Obtener fecha actual en formato YYYY-MM-DD
      const today = new Date().toISOString().split('T')[0];
      const now = new Date().getTime();
      
      // Obtener datos almacenados
      const storedData = localStorage.getItem('chat_message_data');
      if (storedData) {
        const data = JSON.parse(storedData);
        
        // Si los datos son de hoy, cargar contador
        if (data.date === today) {
          setDailyMessageCount(data.count);
        } else {
          // Si son de otro día, reiniciar contador
          setDailyMessageCount(0);
          localStorage.setItem('chat_message_data', JSON.stringify({
            date: today,
            count: 0,
            unlimited: data.unlimited || false,
            blockUntil: data.blockUntil || null,
            blockDuration: data.blockDuration || 12
          }));
        }
        
        // Cargar estado de modo ilimitado
        setUnlimitedMode(data.unlimited || false);
        
        // Cargar tiempo de bloqueo si existe
        if (data.blockUntil) {
          // Si ya pasó el tiempo de bloqueo, resetear
          if (data.blockUntil < now) {
            setBlockUntil(null);
            setBlockDuration(12); // Reiniciar duración de bloqueo
          } else {
            setBlockUntil(data.blockUntil);
            setBlockDuration(data.blockDuration || 12);
          }
        }
      } else {
        // Inicializar datos si no existen
        localStorage.setItem('chat_message_data', JSON.stringify({
          date: today,
          count: 0,
          unlimited: false,
          blockUntil: null,
          blockDuration: 12
        }));
      }
    } catch (error) {
      console.error('Error al cargar contadores de mensajes:', error);
    }
  };
  
  // Función para formatear el tiempo restante de bloqueo
  const formatTimeRemaining = (blockUntilTime) => {
    const now = new Date().getTime();
    const diff = blockUntilTime - now;
    
    if (diff <= 0) return 'Desbloqueado';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours} hora${hours !== 1 ? 's' : ''} y ${minutes} minuto${minutes !== 1 ? 's' : ''}`;
  };
  
  // Función para incrementar el tiempo de bloqueo
  const increaseBlockTime = () => {
    try {
      const now = new Date().getTime();
      const newDuration = blockDuration + BLOCK_INCREMENT;
      const newBlockUntil = now + (newDuration * 60 * 60 * 1000); // Convertir horas a milisegundos
      
      setBlockDuration(newDuration);
      setBlockUntil(newBlockUntil);
      
      // Actualizar localStorage
      const storedData = localStorage.getItem('chat_message_data');
      const data = storedData ? JSON.parse(storedData) : {};
      const today = new Date().toISOString().split('T')[0];
      
      localStorage.setItem('chat_message_data', JSON.stringify({
        ...data,
        date: today,
        blockUntil: newBlockUntil,
        blockDuration: newDuration
      }));
      
      return newBlockUntil;
    } catch (error) {
      console.error('Error al actualizar tiempo de bloqueo:', error);
      return null;
    }
  };
  
  // Función para actualizar el contador de mensajes
  const updateMessageCount = () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const newCount = dailyMessageCount + 1;
      setDailyMessageCount(newCount);
      
      // Actualizar localStorage
      const storedData = localStorage.getItem('chat_message_data');
      const data = storedData ? JSON.parse(storedData) : { 
        unlimited: false,
        blockUntil: null,
        blockDuration: 12 
      };
      
      // Si alcanzó el límite, establecer bloqueo inicial de 12 horas
      let newBlockUntil = data.blockUntil;
      let newBlockDuration = data.blockDuration;
      
      if (newCount >= DAILY_MESSAGE_LIMIT && !blockUntil) {
        const now = new Date().getTime();
        newBlockUntil = now + (12 * 60 * 60 * 1000); // 12 horas en milisegundos
        newBlockDuration = 12;
        setBlockUntil(newBlockUntil);
        setBlockDuration(newBlockDuration);
      }
      
      localStorage.setItem('chat_message_data', JSON.stringify({
        date: today,
        count: newCount,
        unlimited: data.unlimited || false,
        blockUntil: newBlockUntil,
        blockDuration: newBlockDuration
      }));
    } catch (error) {
      console.error('Error al actualizar contador de mensajes:', error);
    }
  };
  
  // Función para desbloquear modo ilimitado
  const unlockUnlimitedMode = () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      setUnlimitedMode(true);
      setBlockUntil(null); // Eliminar bloqueo actual si existe
      
      // Actualizar localStorage
      const storedData = localStorage.getItem('chat_message_data');
      const data = storedData ? JSON.parse(storedData) : { 
        count: dailyMessageCount,
        blockDuration: 12 
      };
      
      localStorage.setItem('chat_message_data', JSON.stringify({
        date: today,
        count: data.count,
        unlimited: true,
        blockUntil: null,
        blockDuration: data.blockDuration
      }));
    } catch (error) {
      console.error('Error al desbloquear modo ilimitado:', error);
    }
  };

  // Scroll al final del chat cuando hay nuevos mensajes
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  // Focus al input cuando se carga la página
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  // Manejar cambio de proveedor
  const handleProviderChange = (newProvider) => {
    setCurrentProvider(newProvider);
    
    // Solo verificamos si hay API key para el nuevo proveedor si hemos tenido interacción
    if (messages.length > 0 && localStorage.getItem(`${newProvider}_api_key`) === null) {
      setShowApiKeyModal(true);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim() || isLoading) return;
    if (!currentModel) {
      setError('Por favor selecciona un modelo válido antes de enviar tu mensaje.');
      return;
    }
    
    // Verificar si está bloqueado por tiempo
    const now = new Date().getTime();
    if (!unlimitedMode && blockUntil && blockUntil > now) {
      setError(`Chat bloqueado por ${formatTimeRemaining(blockUntil)}. Introduce la contraseña para desbloquear.`);
      setShowLimitModal(true);
      return;
    }
    
    // Verificar límite diario
    if (!unlimitedMode && dailyMessageCount >= DAILY_MESSAGE_LIMIT) {
      // Si ya está en el límite pero no hay bloqueo activo, activar bloqueo inicial
      if (!blockUntil) {
        const newBlockUntil = increaseBlockTime();
        setError(`Límite alcanzado. Chat bloqueado por ${formatTimeRemaining(newBlockUntil)}. Introduce la contraseña para desbloquear.`);
      } else {
        // Si ya hay bloqueo, incrementar el tiempo
        const newBlockUntil = increaseBlockTime();
        setError(`Intento de enviar mensaje durante bloqueo. Tiempo incrementado a ${formatTimeRemaining(newBlockUntil)}. Introduce la contraseña para desbloquear.`);
      }
      
      setShowLimitModal(true);
      return;
    }

    const userMessage = { role: 'user', content: inputMessage };
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setIsThinking(true);
    setError(null);
    
    // Actualizar contador de mensajes si no está en modo ilimitado
    if (!unlimitedMode) {
      updateMessageCount();
    }

    try {
      const apiKey = localStorage.getItem(`${currentProvider}_api_key`);
      if (!apiKey) {
        setShowApiKeyModal(true);
        setIsLoading(false);
        setIsThinking(false);
        return;
      }

      const requestBody = {
        messages: [...messages, userMessage],
        provider: currentProvider,
        model: currentModel,
        reasoningLevel: modelSupportsReasoning(currentProvider, currentModel) ? reasoningLevel : undefined,
        stream: true,
        apiKey
      };
      if (currentProvider === 'xai') {
        requestBody.max_tokens = maxTokens;
      }

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        let errorMsg = 'Error en la respuesta del servidor';
        try {
          const errorData = await response.json();
          if (errorData && errorData.error) {
            errorMsg = errorData.error;
          }
        } catch (e) {}
        setError(errorMsg);
        setIsLoading(false);
        setIsThinking(false);
        return;
      }

      const reader = response.body.getReader();
      let assistantMessage = { role: 'assistant', content: '', reasoning: '' };
      let isReasoning = false;

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = new TextDecoder().decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const jsonStr = line.slice(6).trim();
            if (jsonStr === '[DONE]') continue;
            try {
              const data = JSON.parse(jsonStr);
              
              if (data.choices?.[0]?.delta) {
                const delta = data.choices[0].delta;
                
                if (delta.reasoning_content) {
                  isReasoning = true;
                  assistantMessage.reasoning += delta.reasoning_content;
                } else if (delta.content) {
                  isReasoning = false;
                  assistantMessage.content += delta.content;
                }
              }
            } catch (err) {
              // No mostrar el error en el chat
              console.warn('Chunk JSON parse error:', err);
            }
          }
        }

        setMessages(prev => {
          const newMessages = [...prev];
          const lastMessage = newMessages[newMessages.length - 1];
          
          if (lastMessage.role === 'assistant') {
            if (isReasoning) {
              lastMessage.reasoning = assistantMessage.reasoning;
            } else {
              lastMessage.content = assistantMessage.content;
            }
          } else {
            newMessages.push({ ...assistantMessage });
          }
          
          return newMessages;
        });
      }
    } catch (error) {
      console.error('Error:', error);
      setError(error.message || 'Ocurrió un error al procesar tu mensaje');
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: 'Lo siento, hubo un error al procesar tu mensaje. Por favor, intenta de nuevo.' 
      }]);
    } finally {
      setIsLoading(false);
      setIsThinking(false);
    }
  };

  const providerClass = currentProvider === 'deepseek' ? 'from-purple-600 to-indigo-600' : 'from-blue-600 to-blue-800';

  // Función para copiar código
  const copyCode = (content, withMarkdown = false) => {
    const text = withMarkdown ? `\`\`\`${codeOptions.language}\n${content}\n\`\`\`` : content;
    navigator.clipboard.writeText(text);
  };

  // Función para descargar chat en PDF
  const downloadChatPDF = () => {
    const content = messages.map(msg => 
      `${msg.isUser ? 'Usuario' : 'Asistente'}: ${msg.content}`
    ).join('\n\n');
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    saveAs(blob, 'chat-conversation.txt');
  };

  // Función para limpiar el chat
  const clearChat = () => {
    if (window.confirm('¿Estás seguro de que quieres borrar toda la conversación?')) {
      setMessages([]);
    }
  };

  // Función para detectar y formatear código
  const formatMessage = (content) => {
    const codeBlocks = content.match(/```([\s\S]*?)```/g);
    if (!codeBlocks) return content;

    let formattedContent = content;
    codeBlocks.forEach(block => {
      const language = block.match(/```(\w+)/)?.[1] || 'plaintext';
      const code = block.replace(/```\w*\n?/, '').replace(/```$/, '');
      formattedContent = formattedContent.replace(
        block,
        `<div class="code-block" data-language="${language}">${code}</div>`
      );
    });

    return formattedContent;
  };

  // Verificar estado de las APIs
  const checkApiStatus = async (provider, model) => {
    try {
      const apiKey = localStorage.getItem(`${provider}_api_key`);
      if (!apiKey) {
        setApiStatus(prev => ({ ...prev, [provider]: false }));
        return;
      }
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'test' }],
          provider,
          model,
          stream: false,
          apiKey
        })
      });
      setApiStatus(prev => ({ ...prev, [provider]: response.ok }));
    } catch (error) {
      setApiStatus(prev => ({ ...prev, [provider]: false }));
    }
  };

  // Verificar APIs al cargar y cambiar de proveedor
  useEffect(() => {
    checkApiStatus('deepseek', 'deepseek-chat');
    checkApiStatus('xai', 'grok-3-latest');
  }, []);

  useEffect(() => {
    checkApiStatus(currentProvider, currentModel);
  }, [currentProvider, currentModel]);

  // Para mostrar el precio del modelo seleccionado
  const selectedModel = getModelsForProvider(currentProvider).find(m => m.id === currentModel);

  return (
    <div className="flex flex-col h-screen bg-gray-50 dark:bg-gray-900">
      <div className="flex-none p-3 sm:p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-2 sm:gap-4">
          <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4 w-full sm:w-auto">
            <h1 className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent text-center sm:text-left">
              Montana AI
            </h1>
            {/* Indicador de mensajes y bloqueo */}
            {!unlimitedMode && (
              <div className="text-sm">
                {blockUntil && blockUntil > new Date().getTime() ? (
                  <span className="inline-flex items-center px-2 sm:px-3 py-1 rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 text-xs">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                      <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                    <span className="whitespace-nowrap">Bloqueado ({formatTimeRemaining(blockUntil)})</span>
                  </span>
                ) : (
                  <span className="inline-flex items-center px-2 sm:px-3 py-1 rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 text-xs">
                    <span className="whitespace-nowrap">{dailyMessageCount}/{DAILY_MESSAGE_LIMIT} mensajes hoy</span>
                  </span>
                )}
              </div>
            )}
            <div className="flex flex-col sm:flex-row items-center gap-2 w-full sm:w-auto mt-2 sm:mt-0">
              <div className="w-full sm:w-auto">
                <select
                  value={currentProvider}
                  onChange={(e) => setCurrentProvider(e.target.value)}
                  className="w-full sm:w-auto px-2 sm:px-3 py-1 sm:py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white text-sm"
                >
                  {Object.keys(AI_PROVIDERS).map(providerKey => (
                    <option key={providerKey} value={providerKey}>
                      {AI_PROVIDERS[providerKey].name}
                    </option>
{{ ... }}
              <div className="w-full sm:w-auto">
                <div className="flex flex-col gap-1">
                  <select
                    value={currentModel}
                    onChange={(e) => setCurrentModel(e.target.value)}
                    className="w-full sm:w-auto px-2 sm:px-3 py-1 sm:py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white text-sm"
                  >
                    {getFormattedModels(currentProvider).map((model) => (
                      <option key={model.value} value={model.value}>
                        {model.label}
                      </option>
{{ ... }}
                      <option key={model.value} value={model.value}>
                        {model.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>Model && selectedModel.price && (
                    <div className="text-xs text-gray-500 dark:text-gray-400 text-center sm:text-left">
                      Precio: {selectedModel.price.input} / {selectedModel.price.output} | Contexto: {selectedModel.context.toLocaleString()} tokens
                    </div>
                  )}
                </div>
{{ ... }}
            >
              <FaImage />
              <span className="hidden sm:inline">Generar Imágenes</span>
            </a>
            <div 
             <div className="flex-1 overflow-hidden flex flex-col">
        <div className="flex-1 overflow-y-auto" ref={chatContainerRef}>
          <div className="max-w-4xl mx-auto p-2 sm:p-4 space-y-4 sm:space-y-6">
            {messages.map((message, i) => (
              <div key={i} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div 
                  className={`flex items-start gap-2 sm:gap-3 max-w-[95%] sm:max-w-3xl ${message.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}
                >
                  <div className={`
                    flex-none rounded-full p-1.5 sm:p-2 
                    ${message.role === 'user' ? 'bg-blue-100 dark:bg-blue-900' : 'bg-gray-200 dark:bg-gray-700'}
                  `}>
                    {message.role === 'user' ? <FaUser className="text-xs sm:text-base" /> : <FaRobot className="text-xs sm:text-base" />}
                  </div>
                  <div className={`
                    relative rounded-lg p-3 sm:p-4 text-sm sm:text-base break-words
                    ${message.role === 'user' 
                      ? 'bg-blue-500 text-white dark:bg-blue-600' 
                      : 'bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100'}
                    ${!message.content && message.reasoning ? 'opacity-40' : ''}
                  `}>
                    {message.content ? (
                      <Message content={message.content} />
                    ) : message.reasoning ? (
                      <p className="text-xs sm:text-sm italic">Pensando...</p>
                    ) : (
                      <div className="flex items-center space-x-2">
                        <FaSpinner className="animate-spin text-xs sm:text-base" />
                        <span className="text-xs sm:text-sm">Generando respuesta...</span>
                      </div>
                    )}
                    
                    {/* Panel de razonamiento */}
                    {message.reasoning && (
                      <button 
                        className="absolute top-2 right-2 sm:top-4 sm:right-4 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 text-xs sm:text-base"
                        onClick={() => handleModalContent(message.reasoning, 'Razonamiento')}
                      >
                        <FaBrain />
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
            {messages.length === 0 && (
              <div className="flex flex-col items-center justify-center h-full py-6 sm:py-8 space-y-3 sm:space-y-4 text-center text-gray-500 dark:text-gray-400 px-2">
                <div className={`p-4 sm:p-6 rounded-full bg-gradient-to-r ${providerClass} shadow-xl`}>
                  <FaRobot className="text-3xl sm:text-5xl text-white" />
                </div>
                <h2 className="text-xl sm:text-2xl font-bold">Bienvenido a Montana AI</h2>
                <p className="max-w-md text-sm sm:text-base">
                  Haz una pregunta o comienza una conversación con uno de nuestros modelos de IA.
                </p>
              </div>
            )}
          </div>
        </div>    messages.map((message, index) => (
              <div key={index} className="space-y-2">
                <Message
                  message={message}
                  isUser={message.role === 'user'}
                  provider={currentProvider}
{{ ... }}
              {!modelSupportsReasoning(currentProvider, currentModel) && (
                <span className="text-xs text-gray-500">Este modelo no soporta razonamiento</span>
              )}
            </div>
            {currentProvider === 'xai' && (
              <div className="flex-none p-3 sm:p-4 border-t border-gray-200 dark:border-gray-700">
          <div className="max-w-4xl mx-auto">
            <form onSubmit={handleSubmit} className="flex flex-col gap-2">
              <div className="flex gap-2 items-end">
                <div className="flex-grow relative">
                  <textarea
                    ref={inputRef}
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyDown={(e) => {
                      // Enviar con Ctrl/Cmd + Enter
                      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                        e.preventDefault();
                        handleSubmit(e);
                      }
                    }}
                    placeholder="Escribe un mensaje..."
                    className="w-full p-2 sm:p-3 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 overflow-hidden resize-none text-sm sm:text-base"
                    rows={1}
                    style={{
                      height: 'auto',
                      minHeight: '40px',
                      maxHeight: '200px'
                    }}
                    disabled={isLoading}
                  />
                </div>
                <button
                  type="submit"
                  className="flex-none p-2 sm:p-3 rounded-lg bg-blue-500 hover:bg-blue-600 text-white disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={!inputMessage.trim() || isLoading}
                >
                  {isLoading ? <FaSpinner className="animate-spin" /> : <FaPaperPlane />}
                </button>
              </div> className="animate-spin">
                      <FaSpinner />
                    </div>
                    <span>Enviando...</span>
                  </div>
                ) : (
{{ ... }}
                )}
              </button>
            </div>
          </form>
        </div>
      </div>

      <ApiKeyModal
        isOpen={showApiKeyModal}
        onClose={() => setShowApiKeyModal(false)}
        provider={currentProvider}
      />
      
      <ChatLimitModal
        isOpen={showLimitModal}
        onClose={() => setShowLimitModal(false)}
        onUnlock={unlockUnlimitedMode}
        blockTimeRemaining={blockUntil ? formatTimeRemaining(blockUntil) : null}
      />
    </div>
  );
};

export default Chat;